
define endian=big;

define space CODE    type=ram_space  size=2 default;
define space INTMEM  type=ram_space  size=1;
define space EXTMEM  type=ram_space  size=2;
define space SFR     type=ram_space  size=1;
define space BITS    type=ram_space  size=1;

define space register type=register_space size=1;

# Register File
define register offset=0x00  size=1 [ R0 R1 R2 R3 R4 R5 R6 R7 ];
define register offset=0x00  size=2 [ R0R1  R2R3  R4R5  R6R7 ];

define register offset=0x0A  size=1 [ B ACC ];  # relocated to facilitate AB 16-bit access
define register offset=0x0A  size=2 [ AB ];

define register offset=0x82  size=2 [ DPTR ];
define register offset=0x82  size=1 [ DPH DPL ]; # relocated to facilitate DPTR 16-bit access

define register offset=0x40  size=1 [ SP ];
define register offset=0x44  size=2 [ PC ];
define register offset=0x48  size=1 [ PSW ];


@define CY    "PSW[7,1]"
@define AC    "PSW[6,1]"
@define N     "PSW[5,1]"
@define RS1   "PSW[4,1]"
@define RS0   "PSW[3,1]"
@define OV    "PSW[2,1]"
@define Z     "PSW[1,1]"

define pcodeop decimal_adjust;
define pcodeop nop;

# Context, meta instruction shenanigans
#
# While the processor itself has no context beside multi DPTR support (which is not modeled) some compilers
#  implement language intrinsics in a way that an intrinsic implementation function consumes its constexpr
#  parameters from the codespace by popping the return address, and reading data after it with `MOVC`
#
# This mixing of instructions and data in the same space confuses the disassembly engine, which expects
#  normal fallthrough semantics from the `LCALL`s to these functions, and tries to interpret their parameters
#  as instructions. Due to the almost complete utilization of the opbyte space, this usually does not trigger
#  an error until the code flow is completely destroyed, and dozens of phantom functions are created.
#
# All of this crazyness is compensated for with "meta LCALL instructions" - when an LCALL to a specific
#  address (which unfortunately varies by program to program) is encountered, we parse it as a meta instruction
#  which spans across multiple instructions, and implement the schemantics of the intrinsic in pcode.
#
# To make things even worse, some intrinsics consume a non constant (but defined in codespace) amount of
#  data after the LCALL to them. This case is compensated by changing the context into "meta instruction"
#  mode, and tracking the number of extra constructs to consume after the initial instruction in a 
#  context variable - essentially abusing the context register to implement a parsing state machine

# TODO: Compiler complains when I don't have a varnode attached, why?
define space CONTEXT type=ram_space size=1;
define CONTEXT offset=0x0 size=8 [ contextreg ];

define context contextreg
    ctx_meta_op_mode       = (0, 0) noflow

    ctx_switch_arms_remain = (8,15) noflow
    ctx_switch_arms_max    = (16,31) noflow
;

#TOKENS

define token opbyte (8)
    oplo     = (0,3)
    ophi     = (4,7)
    rn       = (0,2)
    rnfill   = (3,3)
    ri       = (0,0)
    rifill   = (1,3)
;
define token AddrByte (8)
    direct  = (0,7)
    bank    = (7,7)
    mainreg = (0,6)
;
define token AddrByte2 (8)
    direct2  = (0,7)
    bank2    = (7,7)
    mainreg2 = (0,6)
;
define token BitByte (8)
    bitbank = (7,7)
    sfrbyte = (3,7)
    bitaddr57 = (5,7)
    sfrbit3 = (3,3)
    sfrbit  = (0,2) dec
    lowbyte = (3,6)
;
define token AddrTwo (16)
    addr16 = (0,15)
;

define token RelByte   (8)  
    rel8 = (0,7) signed
;
define token ImmedByte (8)  
    data = (0,7)
;
define token ImmedTwo  (16)
    data16 = (0,15)
;

define token aopword (16)
   aoplo     = (8,11)
   aopaddr   = (13,15)
   aaddrfill = (12,12)
   adata     = (0,7)
;

attach variables  rn [ R0 R1 R2 R3 R4 R5 R6 R7 ];
attach variables  ri [ R0 R1 ];

# flags macros

macro addflags(op1, op2) {   # Flags set by add instructions
$(CY) = (carry(op1,op2));        # Check for carry
 #OV = (scarry(op1,op2));      # Check for signed carry
}

macro subflags(op1, op2) {   # Flags set by sub instructions
$(CY) = (op1 < op2);        # Check for carry
 #OV = sborrow(op1,op2);      # Check for signed carry
}

macro compflags(op1, op2) {  # Flags set by the compare instructions
$(CY) = (op1 < op2);        # Check for carry
}

macro resultflags(op1) { # Set N,Z flag for results
 $(N) = op1 s< 0;
 $(Z) = op1 == 0;
}

macro push8(val) {
  SP = SP + 1;
  *[INTMEM]:1 SP = val;
}
macro pop8(val) {
  val = *[INTMEM]:1 SP;
  SP = SP - 1;
}

macro push16(val) {
  al:1 = val:1;
  ah:1 = val(1);
  
  SP = SP + 1;
  *[INTMEM]:1 SP = al;
  SP = SP + 1; 
  *[INTMEM]:1 SP = ah;
}

macro pop16(val) {
  ah:1 = *[INTMEM]:1 SP;
  SP = SP - 1;
  al:1 = *[INTMEM]:1 SP;
  SP = SP - 1;
  
  val = (zext(ah) << 8) | zext(al);
}

# Operand display only
CY:      "CY"    is epsilon          {}
Areg:    "A"     is ophi             { export ACC; }
ABreg:   AB      is ophi & AB        { export AB; }
DPTRreg: DPTR    is ophi & DPTR      { export DPTR; }

ADPTR:   "@A+"^DPTR is ophi & DPTR    { ptr:2 = DPTR + zext(ACC); export ptr; }

APC:     "@A+PC"    is epsilon      { tmp:2 = inst_next + zext(ACC); export tmp; }

ATDPTR:  "@"^DPTR   is ophi & DPTR  { ptr:2 = DPTR; export *[EXTMEM]:1 ptr; }

Ri:      @ri       is ri      { export *[INTMEM]:1 ri; }

RiX:     @ri       is ri      { ptr:2 = zext(ri); export *[EXTMEM]:1 ptr; } # limited to 8-bit external data address (I/O state can be used to produce 16-bit addr)


Data:    "#"data   is data    { export *[const]:1 data; }
Data16:  "#"data16 is data16  { export *[const]:2 data16; }


Direct:  mainreg   is bank=0 & mainreg  { export *[INTMEM]:1 mainreg; }

Direct:  direct    is bank=1 & direct   { export *[SFR]:1 direct; }
Direct:  PSW       is bank=1 & direct=0xD0 & PSW  { export PSW;  }
Direct:  "A"       is bank=1 & direct=0xE0  { export ACC; }
Direct:  B         is bank=1 & direct=0xF0 & B  { export B;  }
Direct:  DPL       is bank=1 & direct=0x82 & DPL  { export DPL; }
Direct:  DPH       is bank=1 & direct=0x83 & DPH  { export DPH;  }

Direct2:  mainreg2  is bank2=0 & mainreg2 { export *[INTMEM]:1 mainreg2; }
Direct2: direct2   is bank2=1 & direct2   { export *[SFR]:1 direct2; }
Direct2: PSW       is bank2=1 & direct2=0xD0 & PSW  { export PSW;  }
Direct2: "A"       is bank2=1 & direct2=0xE0  { export ACC; }
Direct2:  B        is bank2=1 & direct2=0xF0 & B  { export B;  }
Direct2:  DPL      is bank2=1 & direct2=0x82 & DPL  { export DPL; }
Direct2:  DPH      is bank2=1 & direct2=0x83 & DPH  { export DPH;  }

##
##TODO !!! 8051 SFRBITS bit overlay block is probably incorrect since there is not a 1:1 mapping to the SFR space
##  While the BitAddr is only used for disassembly markup, and labels come from pspec, the underlying data will
##  not map correctly.  We could switch completely to the full SFR bit mapping as done above for the 80251.
##  This would require a change in the BITS space size.
##
BitAddr:     bitaddr is bitbank=1 & sfrbyte & sfrbit [ bitaddr =(sfrbyte << 3)+sfrbit; ] { export *[BITS]:1 bitaddr; }
BitAddr:     bitaddr is bitbank=0 & lowbyte & sfrbit [ bitaddr =(lowbyte << 3)+sfrbit; ] { export *[BITS]:1 bitaddr; }
BitAddr2: "/"bitaddr is bitbank=1 & sfrbyte & sfrbit [ bitaddr =(sfrbyte << 3)+sfrbit; ] { export *[BITS]:1 bitaddr; }
BitAddr2: "/"bitaddr is bitbank=0 & lowbyte & sfrbit [ bitaddr =(lowbyte << 3)+sfrbit; ] { export *[BITS]:1 bitaddr; }

BitByteAddr: byteaddr  is bitbank=1 & sfrbyte & sfrbit [ byteaddr =(sfrbyte << 3); ] { export *[SFR]:1 byteaddr; }
BitByteAddr: "A"       is bitbank=1 & sfrbyte=0x1C & sfrbit { export ACC; }
BitByteAddr: B         is bitbank=1 & sfrbyte=0x1E & sfrbit & B { export B; }
BitByteAddr: PSW       is bitbank=1 & sfrbyte=0x1A & sfrbit & PSW { export PSW; }
BitByteAddr: byteaddr  is bitbank=0 & lowbyte & sfrbit [ byteaddr = lowbyte + 0x20; ] { export *[INTMEM]:1 byteaddr; }

Addr11: relAddr is aopaddr & adata [ relAddr =(inst_next $and 0xf800)+(aopaddr*256)+adata; ]  { export *:1 relAddr; }
Addr16: addr16 is addr16 { export *:1 addr16; }

Rel8:   relAddr is rel8        [ relAddr=inst_next+rel8; ]      { export *:1 relAddr; }

# Opcodes 

with : ctx_meta_op_mode = 0 {

:ACALL  Addr11 is  aaddrfill=1 & aoplo=1 & Addr11   { ret:2 = inst_next; push16(ret); call Addr11; }

:ADD Areg,rn      is ophi=2          & Areg & rnfill=1 & rn    { addflags(ACC,rn); ACC = ACC + rn; resultflags(ACC); }
:ADD Areg,Direct  is ophi=2 & oplo=5 & Areg; Direct  { addflags(ACC,Direct); ACC = ACC + Direct; resultflags(ACC); }
:ADD Areg,Ri      is ophi=2          & Areg & rifill=3 & Ri  { addflags(ACC,Ri); ACC = ACC + Ri; resultflags(ACC); }
:ADD Areg,Data    is ophi=2 & oplo=4 & Areg; Data    { addflags(ACC,Data); ACC = ACC + Data; resultflags(ACC); }

:ADDC Areg,rn     is ophi=3          & Areg & rnfill=1 & rn    { tmp:1 =$(CY)+ rn; addflags(ACC,tmp); ACC = ACC + tmp; resultflags(ACC); }
:ADDC Areg,Direct is ophi=3 & oplo=5 & Areg; Direct    { tmp:1 =$(CY)+ Direct; addflags(ACC,tmp); ACC = ACC + tmp; resultflags(ACC); }
:ADDC Areg,Ri     is ophi=3          & Areg & rifill=3 & Ri    { tmp:1 =$(CY)+ Ri; addflags(ACC,tmp); ACC = ACC + tmp; resultflags(ACC); }
:ADDC Areg,Data   is ophi=3 & oplo=4 & Areg; Data      {  tmp:1 =$(CY)+ Data; addflags(ACC,tmp); ACC = ACC + tmp; resultflags(ACC); }

:AJMP Addr11 is  aaddrfill=0 & aoplo=1 & Addr11      { goto Addr11; }

:ANL Areg,rn     is ophi=5 & Areg & rnfill=1 & rn          { ACC = ACC & rn; resultflags(ACC); }
:ANL Areg,Direct is ophi=5 & oplo=5 & Areg; Direct     { ACC = ACC & Direct; resultflags(ACC); }
:ANL Areg,Ri     is ophi=5 & Areg & rifill=3 & Ri          { ACC = ACC & Ri; resultflags(ACC); }
:ANL Areg,Data   is ophi=5 & oplo=4 & Areg; Data     { ACC = ACC & Data; resultflags(ACC); }
:ANL Direct,Areg is ophi=5 & oplo=2 & Areg; Direct     { tmp:1 = Direct & ACC; Direct = tmp; resultflags(tmp); }
:ANL Direct,Data is ophi=5 & oplo=3; Direct; Data    { tmp:1 = Direct & Data; Direct = tmp; resultflags(tmp); }

:ANL CY,BitAddr   is CY & ophi=8  & oplo=2; BitAddr  & bitaddr57=7 & sfrbit3=0 & sfrbit & BitByteAddr {tmp:1 = BitByteAddr; $(CY)=$(CY)& ((tmp>>sfrbit)&1); resultflags(tmp); }
:ANL CY,BitAddr2  is CY & ophi=11 & oplo=0; BitAddr2 & bitaddr57=7 & sfrbit3=0 & sfrbit & BitByteAddr {tmp:1 = BitByteAddr; $(CY)=$(CY)& (~((tmp>>sfrbit)&1));  }
:ANL CY,BitAddr   is CY & ophi=8  & oplo=2; BitAddr  & sfrbit & BitByteAddr {$(CY)=$(CY)& BitAddr; }
:ANL CY,BitAddr2  is CY & ophi=11 & oplo=0; BitAddr2 & sfrbit & BitByteAddr {$(CY)=$(CY)& ~BitAddr2; }

:CJNE Areg,Direct,Rel8 is ophi=11 & oplo=5 & Areg; Direct; Rel8  { compflags(ACC,Direct); if (ACC!=Direct) goto Rel8; }
:CJNE Areg,Data,Rel8   is ophi=11 & oplo=4 & Areg; Data; Rel8  { compflags(ACC,Data); if (ACC!=Data) goto Rel8; }
:CJNE rn,Data,Rel8     is ophi=11 & rnfill=1 & rn; Data; Rel8        { compflags(rn,Data); if (rn!=Data) goto Rel8; }
:CJNE Ri,Data,Rel8     is ophi=11 & rifill=3 & Ri; Data; Rel8        { compflags(Ri,Data); if (Ri!=Data) goto Rel8; }

:CLR Areg is ophi=14 & oplo=4 & Areg           { ACC = 0; }
:CLR CY    is CY & ophi=12 & oplo=3            {$(CY)= 0; }

:CLR BitAddr  is ophi=12 & oplo=2; BitAddr & bitaddr57=7 & sfrbit3=0 & sfrbit & BitByteAddr {  local tmp = ~(1<<sfrbit); BitByteAddr = BitByteAddr & tmp; }
:CLR BitAddr  is ophi=12 & oplo=2; BitAddr & sfrbit & BitByteAddr { BitAddr = 0; }

:CPL Areg is ophi=15 & oplo=4 & Areg           { ACC = ~ACC; }
:CPL CY    is CY & ophi=11 & oplo=3              {$(CY)=$(CY)^ 1; }

:CPL BitAddr  is ophi=11 & oplo=2; BitAddr & bitaddr57=7 & sfrbit3=0 & sfrbit & BitByteAddr { tmp:1 = (1<<sfrbit); BitByteAddr = BitByteAddr ^ tmp; }
:CPL BitAddr  is ophi=11 & oplo=2; BitAddr & sfrbit & BitByteAddr { BitAddr = BitAddr ^ 1; }

:DA Areg    is ophi=13 & oplo=4 & Areg    { ACC = decimal_adjust(ACC); }

:DEC Areg   is ophi=1 & oplo=4 & Areg   { ACC = ACC - 1; }
:DEC rn     is ophi=1 & rnfill=1 & rn           { rn = rn - 1; }
:DEC Direct is ophi=1 & oplo=5; Direct    { Direct = Direct - 1; }
:DEC Ri     is ophi=1 & rifill=3 & Ri           { Ri = Ri - 1; }

:DIV ABreg     is ophi=8 & oplo=4 & ABreg     { PSW = PSW & 0x7b;  tmp : 1 = (B == 0)<<2; PSW = PSW | tmp; if (B==0) goto inst_next;  tmp2 : 1 = ACC; ACC = tmp2 / B; B = tmp2 % B; }

:DJNZ rn,Rel8     is ophi=13 & rnfill=1 & rnfill=1 & rn; Rel8  { rn = rn - 1; if (rn!=0) goto Rel8; }
:DJNZ Direct,Rel8 is ophi=13 & oplo=5; Direct; Rel8  { Direct = Direct - 1; if (Direct!=0) goto Rel8; }

:INC Areg    is ophi=0 & oplo=4 & Areg    { ACC = ACC + 1; }
:INC rn      is ophi=0 & rnfill=1 & rn            { rn = rn + 1; }
:INC Direct  is ophi=0 & oplo=5; Direct   { Direct = Direct + 1; }

:INC Ri      is ophi=0 & rifill=3 & Ri            { Ri = Ri + 1; }
:INC DPTRreg is ophi=10 & oplo=3 & DPTRreg  { DPTR = DPTR + 1; }

:JB  BitAddr,Rel8 is ophi=2 & oplo=0; BitAddr & bitaddr57=7 & sfrbit3=0 & sfrbit & BitByteAddr; Rel8   { if (((BitByteAddr>>sfrbit)&1) == 1:1) goto Rel8; }
:JBC BitAddr,Rel8 is ophi=1 & oplo=0; BitAddr & bitaddr57=7 & sfrbit3=0 & sfrbit & BitByteAddr; Rel8   { tmp:1 = 1<<sfrbit; if ((BitByteAddr & tmp)==0) goto inst_next; BitByteAddr = BitByteAddr & ~tmp; goto Rel8; }
:JB  BitAddr,Rel8 is ophi=2 & oplo=0; BitAddr & sfrbit & BitByteAddr; Rel8   { if (BitAddr == 1:1) goto Rel8; }
:JBC BitAddr,Rel8 is ophi=1 & oplo=0; BitAddr & sfrbit & BitByteAddr; Rel8   { if (BitAddr == 0:1) goto inst_next; BitAddr = 0; goto Rel8; }
:JC  Rel8  is ophi=4 & oplo=0; Rel8            { if ($(CY) != 0) goto Rel8; }
:JMP ADPTR is ophi=7 & oplo=3 & ADPTR          { goto [ADPTR]; }

:JNB BitAddr,Rel8 is ophi=3 & oplo=0; BitAddr & bitaddr57=7 & sfrbit3=0 & sfrbit & BitByteAddr; Rel8  { if (((BitByteAddr>>sfrbit)&1)==0:1) goto Rel8; }
:JNB BitAddr,Rel8 is ophi=3 & oplo=0; BitAddr & sfrbit & BitByteAddr; Rel8  { if (BitAddr == 0:1) goto Rel8; }

:JNC Rel8 is ophi=5 & oplo=0; Rel8           { if ($(CY)   == 0) goto Rel8; }
:JNZ Rel8 is ophi=7 & oplo=0; Rel8           { if (ACC != 0) goto Rel8; }
:JZ Rel8  is ophi=6 & oplo=0; Rel8           { if (ACC == 0) goto Rel8; }

:LCALL Addr16 is ophi=1 & oplo=2; Addr16  {  ret:2 = inst_next; push16(ret); call Addr16; }
:LJMP Addr16  is ophi=0 & oplo=2; Addr16  { goto Addr16; }

:MOV Areg,rn        is ophi=14 & rnfill=1 & rn & Areg          { ACC = rn; }
:MOV Areg,Direct    is ophi=14 & oplo=5 & Areg; Direct     { ACC = Direct; }
:MOV Areg,Ri        is ophi=14 & Areg & rifill=3 & Ri          { ACC = Ri; }
:MOV Areg,Data      is ophi=7 & oplo=4 & Areg; Data          { ACC = Data; }
:MOV rn,Areg        is ophi=15 & rnfill=1 & rn & Areg          { rn = ACC; }
:MOV rn,Direct      is ophi=10 & rnfill=1 & rn; Direct             { rn = Direct; }
:MOV rn,Data        is ophi=7 & rnfill=1 & rn; Data        { rn = Data; }
:MOV Direct,Areg    is ophi=15 & oplo=5 & Areg; Direct     { Direct = ACC; }
:MOV Direct,rn      is ophi=8 & rnfill=1 & rn; Direct          { Direct = rn; }
:MOV Direct2,Direct is ophi=8 & oplo=5; Direct; Direct2      { Direct2 = Direct; }
:MOV Direct,Ri      is ophi=8 & rifill=3 & Ri; Direct          { Direct = Ri; }
:MOV Direct,Data    is ophi=7 & oplo=5; Direct; Data     { Direct = Data; }
:MOV Ri,Areg        is ophi=15 & rifill=3 & Ri & Areg          { Ri = ACC; }
:MOV Ri,Direct      is ophi=10 & rifill=3 & Ri; Direct             { Ri = Direct; }
:MOV Ri,Data        is ophi=7 & rifill=3 & Ri; Data          { Ri = Data; }
:MOV DPTRreg,Data16 is ophi=9 & oplo=0 & DPTRreg; Data16   { DPTR = Data16; }

:MOV CY,BitAddr is CY & ophi=10 & oplo=2;  BitAddr & bitaddr57=7 & sfrbit3=0 & sfrbit & BitByteAddr {$(CY)= (BitByteAddr>>sfrbit)&1; }
:MOV BitAddr,CY is CY & ophi=9  & oplo=2;  BitAddr & bitaddr57=7 & sfrbit3=0 & sfrbit & BitByteAddr { BitByteAddr = BitByteAddr & (~(1<<sfrbit)); BitByteAddr = BitByteAddr | ($(CY)<<sfrbit); }
:MOV CY,BitAddr is CY & ophi=10 & oplo=2;  BitAddr & sfrbit & BitByteAddr {$(CY)= BitAddr; }
:MOV BitAddr,CY is CY & ophi=9  & oplo=2;  BitAddr & sfrbit & BitByteAddr { BitAddr = $(CY); }

:MOVC  Areg,ADPTR is ophi=9 & oplo=3 & ADPTR & Areg   { ACC = *:1 ADPTR; }
:MOVC  Areg,APC   is ophi=8 & oplo=3 & APC   & Areg   { ACC = *:1 APC; }

:MOVX  Areg,RiX     is ophi=14 & rifill=1 & RiX & Areg  { ACC = RiX; }
:MOVX  Areg,ATDPTR  is ophi=14 & oplo=0 & Areg & ATDPTR { ACC = ATDPTR; }
:MOVX  RiX,Areg     is ophi=15 & rifill=1 & RiX & Areg  { RiX = ACC; }
:MOVX  ATDPTR,Areg  is ophi=15 & oplo=0 & Areg & ATDPTR { ATDPTR = ACC; }

:MUL ABreg         is ophi=10 & oplo=4 & ABreg     { PSW = PSW & 0x7b; tmp:2 = zext(ACC) * zext(B); ACC = tmp(0); B = tmp(1); PSW = PSW | ((B!=0)<<2); }

:NOP             is ophi=0  & oplo=0  { nop(); }

:ORL Areg,rn     is ophi=4 & rnfill=1 & rn & Areg          { ACC = ACC | rn; }
:ORL Areg,Direct is ophi=4 & oplo=5 & Areg; Direct     { ACC = ACC | Direct; }
:ORL Areg,Ri     is ophi=4 & Areg & rifill=3 & Ri            { ACC = ACC | Ri; }
:ORL Areg,Data   is ophi=4 & oplo=4 & Areg; Data       { ACC = ACC | Data; }
:ORL Direct,Areg is ophi=4 & oplo=2 & Areg; Direct     { Direct = Direct | ACC; }
:ORL Direct,Data is ophi=4 & oplo=3 & Areg; Direct; Data { Direct = Direct | Data; }

:ORL CY,BitAddr  is CY & ophi=7  & oplo=2; BitAddr  & bitaddr57=7 & sfrbit3=0 & sfrbit & BitByteAddr {$(CY)=$(CY)| ((BitByteAddr>>sfrbit)&1); }
:ORL CY,BitAddr2 is CY & ophi=10 & oplo=0; BitAddr2 & bitaddr57=7 & sfrbit3=0 & sfrbit & BitByteAddr {$(CY)=$(CY)| (((BitByteAddr>>sfrbit)&1)^1); }
:ORL CY,BitAddr  is CY & ophi=7  & oplo=2; BitAddr  & sfrbit & BitByteAddr {$(CY)=$(CY)| BitAddr; }
:ORL CY,BitAddr2 is CY & ophi=10 & oplo=0; BitAddr2 & sfrbit & BitByteAddr {$(CY)=$(CY)| (BitAddr2^1); }

:POP  Direct is ophi=13 & oplo=0; Direct  { pop8(Direct); }

:PUSH Direct is ophi=12 & oplo=0; Direct  { push8(Direct); }

:RET  is ophi=2 & oplo=2  { pc:2 = 0; pop16(pc); return[pc]; }
:RETI is ophi=3 & oplo=2  { pc:2 = 0; pop16(pc); return[pc]; }

:RL   Areg is ophi=2 & oplo=3 & Areg          { ACC = (ACC<<1) | (ACC>>7); }
:RLC  Areg is ophi=3 & oplo=3 & Areg          { tmp:1 = (ACC&0x80)>>7; ACC = (ACC<<1) | $(CY);$(CY)= tmp; }
:RR   Areg is ophi=0 & oplo=3 & Areg          { ACC = (ACC>>1) | (ACC<<7); }
:RRC  Areg is ophi=1 & oplo=3 & Areg          { tmp:1 = ACC&1; ACC = (ACC>>1) | ($(CY)<<7);$(CY)= tmp; }

:SETB  CY is CY & ophi=13 & oplo=3           { $(CY)=1; }

:SETB BitAddr is ophi=13 & oplo=2; BitAddr & bitaddr57=7 & sfrbit3=0 & sfrbit & BitByteAddr { BitByteAddr = BitByteAddr | (1<<sfrbit); }
:SETB BitAddr is ophi=13 & oplo=2; BitAddr & sfrbit & BitByteAddr { BitAddr = 1; }

:SJMP Rel8        is ophi=8 & oplo=0; Rel8      { goto Rel8; }

:SUBB Areg,rn     is ophi=9 & rnfill=1 & rn & Areg        {  tmp : 1 = rn+$(CY); subflags(ACC,tmp); ACC = ACC - tmp; }
:SUBB Areg,Direct is ophi=9 & oplo=5 & Areg; Direct {  tmp:1 = Direct+$(CY); subflags(ACC,tmp); ACC = ACC - tmp; }
:SUBB Areg,Ri     is ophi=9 & Areg & rifill=3 & Ri        {  local tmp = Ri+$(CY); subflags(ACC,tmp); ACC = ACC - tmp; }
:SUBB Areg,Data   is ophi=9 & oplo=4 & Areg; Data { tmp:1 = Data+$(CY); subflags(ACC,tmp); ACC = ACC - tmp; }

:SWAP  Areg       is ophi=12 & oplo=4 & Areg    { ACC = (ACC>>4) | (ACC<<4); }

:XCH  Areg,rn     is ophi=12 & rnfill=1 & rn & Areg      {  tmp : 1 = ACC; ACC = rn; rn = tmp; }
:XCH  Areg,Direct is ophi=12 & oplo=5 & Areg; Direct {  tmp : 1 = ACC; ACC = Direct; Direct = tmp; }
:XCH  Areg,Ri     is ophi=12 & rifill=3 & Ri & Areg      {  tmp : 1 = ACC; ACC = Ri; Ri = tmp; }

:XCHD Areg,Ri    is ophi=13 & Areg & rifill=3 & Ri        {  tmp : 1 = ACC & 0xf; ACC = (ACC&0xf0) | (Ri&0xf); Ri = (Ri&0xf0) | tmp; }

:XRL Areg,rn     is ophi=6 & rnfill=1 & rn & Areg       { ACC = ACC ^ rn; }
:XRL Areg,Direct is ophi=6 & oplo=5 & Areg; Direct  { ACC = ACC ^ Direct; }
:XRL Areg,Ri     is ophi=6 & rifill=3 & Ri & Areg       { ACC = ACC ^ Ri; }
:XRL Areg,Data   is ophi=6 & oplo=4 & Areg; Data  { ACC = ACC ^ Data; }
:XRL Direct,Areg is ophi=6 & oplo=2 & Areg; Direct  { Direct = Direct ^ ACC; }
:XRL Direct,Data is ophi=6 & oplo=3; Direct; Data { Direct = Direct ^ Data; }

}

define token ccopy_data (48)
    ccopy_dst = (0,15)
    ccopy_src = (16,31) 
    ccopy_end = (32,47)
;

define token code_param_t8  (8)  code_param8  = (0,1);
define token code_param_t16 (16) code_param16 = (0,1);
define token code_param_t24 (24) code_param24 = (0,1);
define token code_param_t32 (32) code_param32 = (0,1);

define token sw_min_t (16) sw_min = (0,15);
define token sw_max_t (16) sw_max = (0,15);
define token sw_default_t (16) sw_default = (0,15);

SwDefault: is sw_default { export *:1 sw_default; }

with : ctx_meta_op_mode = 0 {

    :__ccopy ccopy_src-len->ccopy_dst is ophi=1 & oplo=2; addr16=0x0e2c; ccopy_src & ccopy_end & ccopy_dst [ len = ccopy_end - ccopy_src; ] {
        src:2 = ccopy_src;
        dst:2 = ccopy_dst;

        <loop>
        *:1 dst = *:1 src;
        src = src + 1;
        dst = dst + 1;
        if (src != ccopy_end) goto <loop>;
    }

    :__unkA Addr16 ??? is ophi=1 & oplo=2; addr16=0x0bfc & Addr16; code_param8 {
        call Addr16;
    }
    :__unkB Addr16 ??? is ophi=1 & oplo=2; addr16=0x0c02 & Addr16; code_param8 {
        call Addr16;
    }
    :__unkC Addr16 ??? is ophi=1 & oplo=2; addr16=0x0c06 & Addr16; code_param8 {
        call Addr16;
    }

    :__switch sw_min,sw_max is ophi=1 & oplo=2; addr16=0x0d6c & Addr16; sw_min; sw_max; SwDefault
    [
        # Enter meta parsing mode
        ctx_meta_op_mode = 1;
        globalset(inst_next, ctx_meta_op_mode);

        # Propagate active switch info
        ctx_switch_arms_max = sw_max;
        globalset(inst_next, ctx_switch_arms_max);

        # Expect some switch arms to follow
        ctx_switch_arms_remain = sw_max - sw_min + 1;
        globalset(inst_next, ctx_switch_arms_remain);
    ]
    {
        call Addr16;

        if (R2R3 < sw_min) goto SwDefault;
        if (R2R3 > sw_max) goto SwDefault;

        local case:2 = inst_next + (R2R3 - sw_min) * 2;
        local target:2 = *[CODE]:2 case;
        goto [target];
    }

}

with : ctx_meta_op_mode = 1 {

    :__switch_case sw_case Addr16 is ctx_switch_arms_remain != 1 & Addr16
    [
        sw_case = ctx_switch_arms_max - ctx_switch_arms_remain;

        # Propagate context
        globalset(inst_next, ctx_meta_op_mode);
        globalset(inst_next, ctx_switch_arms_max);

        # Expect more switch arms
        ctx_switch_arms_remain = ctx_switch_arms_remain - 1;
        globalset(inst_next, ctx_switch_arms_remain);
    ]
    {}

    :__switch_case sw_case Addr16 is ctx_switch_arms_remain = 1 & Addr16
    [
        sw_case = ctx_switch_arms_max;

        # Exit meta parsing mode
        ctx_meta_op_mode = 0;
        globalset(inst_next, ctx_meta_op_mode);
    ]
    {}

}